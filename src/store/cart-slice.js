import { createSlice } from "@reduxjs/toolkit";

// Create a Redux slice for managing the "cart" state.
const cartSlice = createSlice({
  // Specify the name of the slice, which will be used to generate action type strings.
  name: "cart",

  // Define the initial state for this slice, including an empty "items" array and a "totalQuantity" set to 0.
  initialState: { items: [], totalQuantity: 0 },

  // Define a set of reducer functions to handle state changes.
  reducers: {
    // Reducer to replace the entire cart state.
    replaceCart(state, action) {
      state.totalQuantity = action.payload.totalQuantity;
      state.items = action.payload.items;
    },
    // Reducer to add an item to the cart.
    addItemToCart(state, action) {
      // Extract the new item from the action payload.
      const newItem = action.payload;

      // Check if the item already exists in the cart by looking for an item with the same "id."
      const existingItem = state.items.find((item) => item.id === newItem.id);

      // Increment the total quantity in the cart.
      state.totalQuantity++;

      // If the item doesn't exist in the cart, add it as a new item.
      if (!existingItem) {
        state.items.push({
          id: newItem.id,
          price: newItem.price,
          quantity: 1,
          totalPrice: newItem.price,
          title: newItem.title,
        });
      } else {
        // If the item already exists in the cart, increment its quantity and update the total price.
        existingItem.quantity++;
        existingItem.totalPrice = existingItem.totalPrice + newItem.price;
      }
    },
    // Reducer (currently empty) for potential future use to remove an item from the cart.
    removeItemFromCart(state, action) {
      const id = action.payload;
      const existingItem = state.items.find((item) => item.id === id);

      // Decrement the total quantity in the cart.
      state.totalQuantity--;

      if (existingItem.quantity === 1) {
        // If the item quantity is 1, remove it from the cart.
        state.items = state.items.filter((item) => item.id !== id);
      } else {
        // If the item quantity is greater than 1, decrement its quantity and update the total price.
        existingItem.quantity--;
        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;
      }
    },
  },
});

// Export the actions generated by the cart slice.
export const cartActions = cartSlice.actions;

export default cartSlice;
